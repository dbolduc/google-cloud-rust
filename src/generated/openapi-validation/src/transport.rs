// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;

/// Implements [SecretManagerService](super::stub::SecretManagerService) using a [gaxi::http::ReqwestClient].
#[derive(Clone)]
pub struct SecretManagerService {
    inner: gaxi::http::ReqwestClient,
}

impl std::fmt::Debug for SecretManagerService {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("SecretManagerService")
            .field("inner", &self.inner)
            .finish()
    }
}

impl SecretManagerService {
    pub async fn new(config: gaxi::options::ClientConfig) -> gax::client_builder::Result<Self> {
        let inner = gaxi::http::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::SecretManagerService for SecretManagerService {
    async fn list_locations(
        &self,
        req: crate::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListLocationsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = req
                        .filter
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("filter", p)]));
                    let builder = req
                        .page_size
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("pageSize", p)]));
                    let builder = req
                        .page_token
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("pageToken", p)]));
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_location(
        &self,
        req: crate::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Location>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn list_secrets(
        &self,
        req: crate::model::ListSecretsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListSecretsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = req
                        .page_size
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("pageSize", p)]));
                    let builder = req
                        .page_token
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("pageToken", p)]));
                    let builder = req
                        .filter
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("filter", p)]));
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_secret(
        &self,
        req: crate::model::CreateSecretRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Secret>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    let builder = builder.query(&[("secretId", &req.secret_id)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.request_body), options)
            .await
    }

    async fn list_secrets_by_project_and_location(
        &self,
        req: crate::model::ListSecretsByProjectAndLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListSecretsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = req
                        .page_size
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("pageSize", p)]));
                    let builder = req
                        .page_token
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("pageToken", p)]));
                    let builder = req
                        .filter
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("filter", p)]));
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_secret_by_project_and_location(
        &self,
        req: crate::model::CreateSecretByProjectAndLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Secret>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    let builder = builder.query(&[("secretId", &req.secret_id)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.request_body), options)
            .await
    }

    async fn add_secret_version(
        &self,
        req: crate::model::AddSecretVersionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SecretVersion>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}:addVersion",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn add_secret_version_by_project_and_location_and_secret(
        &self,
        req: crate::model::AddSecretVersionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SecretVersion>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}:addVersion",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn get_secret(
        &self,
        req: crate::model::GetSecretRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Secret>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn delete_secret(
        &self,
        req: crate::model::DeleteSecretRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Empty>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::DELETE, path);
                    let builder = req
                        .etag
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("etag", p)]));
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn update_secret(
        &self,
        req: crate::model::UpdateSecretRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Secret>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::PATCH, path);
                    let builder = {
                        use gaxi::query_parameter::QueryParameter;
                        serde_json::to_value(&req.update_mask)
                            .map_err(Error::ser)?
                            .add(builder, "updateMask")
                    };
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.request_body), options)
            .await
    }

    async fn get_secret_by_project_and_location_and_secret(
        &self,
        req: crate::model::GetSecretByProjectAndLocationAndSecretRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Secret>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn delete_secret_by_project_and_location_and_secret(
        &self,
        req: crate::model::DeleteSecretByProjectAndLocationAndSecretRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Empty>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::DELETE, path);
                    let builder = req
                        .etag
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("etag", p)]));
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn update_secret_by_project_and_location_and_secret(
        &self,
        req: crate::model::UpdateSecretByProjectAndLocationAndSecretRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Secret>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::PATCH, path);
                    let builder = {
                        use gaxi::query_parameter::QueryParameter;
                        serde_json::to_value(&req.update_mask)
                            .map_err(Error::ser)?
                            .add(builder, "updateMask")
                    };
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.request_body), options)
            .await
    }

    async fn list_secret_versions(
        &self,
        req: crate::model::ListSecretVersionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListSecretVersionsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}/versions",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = req
                        .page_size
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("pageSize", p)]));
                    let builder = req
                        .page_token
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("pageToken", p)]));
                    let builder = req
                        .filter
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("filter", p)]));
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn list_secret_versions_by_project_and_location_and_secret(
        &self,
        req: crate::model::ListSecretVersionsByProjectAndLocationAndSecretRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListSecretVersionsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}/versions",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = req
                        .page_size
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("pageSize", p)]));
                    let builder = req
                        .page_token
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("pageToken", p)]));
                    let builder = req
                        .filter
                        .iter()
                        .fold(builder, |builder, p| builder.query(&[("filter", p)]));
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_secret_version(
        &self,
        req: crate::model::GetSecretVersionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SecretVersion>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}/versions/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.version)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.version),
                        "version",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_secret_version_by_project_and_location_and_secret_and_version(
        &self,
        req: crate::model::GetSecretVersionByProjectAndLocationAndSecretAndVersionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SecretVersion>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}/versions/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.version)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.version),
                        "version",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn access_secret_version(
        &self,
        req: crate::model::AccessSecretVersionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::AccessSecretVersionResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}/versions/{}:access",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.version)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.version),
                        "version",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn access_secret_version_by_project_and_location_and_secret_and_version(
        &self,
        req: crate::model::AccessSecretVersionByProjectAndLocationAndSecretAndVersionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::AccessSecretVersionResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}/versions/{}:access",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.version)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.version),
                        "version",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn disable_secret_version(
        &self,
        req: crate::model::DisableSecretVersionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SecretVersion>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}/versions/{}:disable",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.version)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.version),
                        "version",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn disable_secret_version_by_project_and_location_and_secret_and_version(
        &self,
        req: crate::model::DisableSecretVersionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SecretVersion>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}/versions/{}:disable",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.version)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.version),
                        "version",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn enable_secret_version(
        &self,
        req: crate::model::EnableSecretVersionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SecretVersion>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}/versions/{}:enable",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.version)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.version),
                        "version",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn enable_secret_version_by_project_and_location_and_secret_and_version(
        &self,
        req: crate::model::EnableSecretVersionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SecretVersion>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}/versions/{}:enable",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.version)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.version),
                        "version",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn destroy_secret_version(
        &self,
        req: crate::model::DestroySecretVersionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SecretVersion>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}/versions/{}:destroy",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.version)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.version),
                        "version",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn destroy_secret_version_by_project_and_location_and_secret_and_version(
        &self,
        req: crate::model::DestroySecretVersionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SecretVersion>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}/versions/{}:destroy",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.version)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.version),
                        "version",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn set_iam_policy(
        &self,
        req: crate::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Policy>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}:setIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn set_iam_policy_by_project_and_location_and_secret(
        &self,
        req: crate::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Policy>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}:setIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn get_iam_policy(
        &self,
        req: crate::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Policy>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}:getIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = req
                        .options_requested_policy_version
                        .iter()
                        .fold(builder, |builder, p| {
                            builder.query(&[("options.requestedPolicyVersion", p)])
                        });
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_iam_policy_by_project_and_location_and_secret(
        &self,
        req: crate::model::GetIamPolicyByProjectAndLocationAndSecretRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Policy>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}:getIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = req
                        .options_requested_policy_version
                        .iter()
                        .fold(builder, |builder, p| {
                            builder.query(&[("options.requestedPolicyVersion", p)])
                        });
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn test_iam_permissions(
        &self,
        req: crate::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::TestIamPermissionsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/secrets/{}:testIamPermissions",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn test_iam_permissions_by_project_and_location_and_secret(
        &self,
        req: crate::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::TestIamPermissionsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/projects/{}/locations/{}/secrets/{}:testIamPermissions",
                    composable_matches(
                        Some(&req).map(|m| &m.project)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.location)?,
                        &[Segment::SingleWildcard,]
                    )?,
                    composable_matches(
                        Some(&req).map(|m| &m.secret)?,
                        &[Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.project),
                        "project",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.location),
                        "location",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.secret),
                        "secret",
                        &[Segment::SingleWildcard],
                        "*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }
}
