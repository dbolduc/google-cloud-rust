// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;

/// Implements [CloudControlsPartnerCore](super::stub::CloudControlsPartnerCore) using a [gaxi::http::ReqwestClient].
#[derive(Clone)]
pub struct CloudControlsPartnerCore {
    inner: gaxi::http::ReqwestClient,
}

impl std::fmt::Debug for CloudControlsPartnerCore {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("CloudControlsPartnerCore")
            .field("inner", &self.inner)
            .finish()
    }
}

impl CloudControlsPartnerCore {
    pub async fn new(config: gaxi::options::ClientConfig) -> gax::client_builder::Result<Self> {
        let inner = gaxi::http::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::CloudControlsPartnerCore for CloudControlsPartnerCore {
    async fn get_workload(
        &self,
        req: crate::model::GetWorkloadRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Workload>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("customers"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("workloads"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("customers"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("workloads"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/locations/*/customers/*/workloads/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn list_workloads(
        &self,
        req: crate::model::ListWorkloadsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListWorkloadsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("customers"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/workloads", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("customers"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/locations/*/customers/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("orderBy", &req.order_by)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_customer(
        &self,
        req: crate::model::GetCustomerRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Customer>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("customers"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("customers"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/locations/*/customers/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn list_customers(
        &self,
        req: crate::model::ListCustomersRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListCustomersResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/customers", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("orderBy", &req.order_by)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_ekm_connections(
        &self,
        req: crate::model::GetEkmConnectionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::EkmConnections>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("customers"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("workloads"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("ekmConnections"),
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("customers"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("workloads"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("ekmConnections"),
                        ],
                        "organizations/*/locations/*/customers/*/workloads/*/ekmConnections",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_partner_permissions(
        &self,
        req: crate::model::GetPartnerPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::PartnerPermissions>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("customers"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("workloads"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("partnerPermissions"),
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("customers"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("workloads"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("partnerPermissions"),
                        ],
                        "organizations/*/locations/*/customers/*/workloads/*/partnerPermissions",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn list_access_approval_requests(
        &self,
        req: crate::model::ListAccessApprovalRequestsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListAccessApprovalRequestsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("customers"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("workloads"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/accessApprovalRequests", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("customers"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("workloads"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/locations/*/customers/*/workloads/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("orderBy", &req.order_by)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_partner(
        &self,
        req: crate::model::GetPartnerRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Partner>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("partner"),
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("partner"),
                        ],
                        "organizations/*/locations/*/partner",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_customer(
        &self,
        req: crate::model::CreateCustomerRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Customer>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/customers", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("customerId", &req.customer_id)]);

        self.inner
            .execute(builder, Some(req.customer), options)
            .await
    }

    async fn update_customer(
        &self,
        req: crate::model::UpdateCustomerRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Customer>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req)
                    .and_then(|m| m.customer.as_ref())
                    .map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("customers"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req)
                            .and_then(|m| m.customer.as_ref())
                            .map(|m| &m.name),
                        "customer.name",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("customers"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/locations/*/customers/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::PATCH, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = req
            .update_mask
            .as_ref()
            .map(|p| serde_json::to_value(p).map_err(Error::ser))
            .transpose()?
            .into_iter()
            .fold(builder, |builder, v| {
                use gaxi::query_parameter::QueryParameter;
                v.add(builder, "updateMask")
            });

        self.inner
            .execute(builder, Some(req.customer), options)
            .await
    }

    async fn delete_customer(
        &self,
        req: crate::model::DeleteCustomerRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("customers"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("customers"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/locations/*/customers/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::DELETE, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
            .map(|r: gax::response::Response<wkt::Empty>| {
                let (parts, _) = r.into_parts();
                gax::response::Response::from_parts(parts, ())
            })
    }
}

/// Implements [CloudControlsPartnerMonitoring](super::stub::CloudControlsPartnerMonitoring) using a [gaxi::http::ReqwestClient].
#[derive(Clone)]
pub struct CloudControlsPartnerMonitoring {
    inner: gaxi::http::ReqwestClient,
}

impl std::fmt::Debug for CloudControlsPartnerMonitoring {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("CloudControlsPartnerMonitoring")
            .field("inner", &self.inner)
            .finish()
    }
}

impl CloudControlsPartnerMonitoring {
    pub async fn new(config: gaxi::options::ClientConfig) -> gax::client_builder::Result<Self> {
        let inner = gaxi::http::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::CloudControlsPartnerMonitoring for CloudControlsPartnerMonitoring {
    async fn list_violations(
        &self,
        req: crate::model::ListViolationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListViolationsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("customers"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("workloads"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/violations", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("customers"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("workloads"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/locations/*/customers/*/workloads/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("orderBy", &req.order_by)]);
        let builder = req
            .interval
            .as_ref()
            .map(|p| serde_json::to_value(p).map_err(Error::ser))
            .transpose()?
            .into_iter()
            .fold(builder, |builder, v| {
                use gaxi::query_parameter::QueryParameter;
                v.add(builder, "interval")
            });

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_violation(
        &self,
        req: crate::model::GetViolationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Violation>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("customers"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("workloads"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("violations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("customers"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("workloads"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("violations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/locations/*/customers/*/workloads/*/violations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }
}
