// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;

/// Implements [DataprocMetastore](super::stub::DataprocMetastore) using a [gaxi::http::ReqwestClient].
#[derive(Clone)]
pub struct DataprocMetastore {
    inner: gaxi::http::ReqwestClient,
}

impl std::fmt::Debug for DataprocMetastore {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("DataprocMetastore")
            .field("inner", &self.inner)
            .finish()
    }
}

impl DataprocMetastore {
    pub async fn new(config: gaxi::options::ClientConfig) -> gax::client_builder::Result<Self> {
        let inner = gaxi::http::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::DataprocMetastore for DataprocMetastore {
    async fn list_services(
        &self,
        req: crate::model::ListServicesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListServicesResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}/services",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("orderBy", &req.order_by)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_service(
        &self,
        req: crate::model::GetServiceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Service>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_service(
        &self,
        req: crate::model::CreateServiceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}/services",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("serviceId", &req.service_id)]);
        let builder = builder.query(&[("requestId", &req.request_id)]);

        self.inner
            .execute(builder, Some(req.service), options)
            .await
    }

    async fn update_service(
        &self,
        req: crate::model::UpdateServiceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req)
                            .and_then(|m| m.service.as_ref())
                            .map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).and_then(|m| m.service.as_ref()).map(|m| &m.name),
                        "service.name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::PATCH, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = req
            .update_mask
            .as_ref()
            .map(|p| serde_json::to_value(p).map_err(Error::ser))
            .transpose()?
            .into_iter()
            .fold(builder, |builder, v| {
                use gaxi::query_parameter::QueryParameter;
                v.add(builder, "updateMask")
            });
        let builder = builder.query(&[("requestId", &req.request_id)]);

        self.inner
            .execute(builder, Some(req.service), options)
            .await
    }

    async fn delete_service(
        &self,
        req: crate::model::DeleteServiceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::DELETE, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("requestId", &req.request_id)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn list_metadata_imports(
        &self,
        req: crate::model::ListMetadataImportsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListMetadataImportsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}/metadataImports",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("orderBy", &req.order_by)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_metadata_import(
        &self,
        req: crate::model::GetMetadataImportRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::MetadataImport>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("metadataImports"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("metadataImports"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*/metadataImports/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_metadata_import(
        &self,
        req: crate::model::CreateMetadataImportRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}/metadataImports",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("metadataImportId", &req.metadata_import_id)]);
        let builder = builder.query(&[("requestId", &req.request_id)]);

        self.inner
            .execute(builder, Some(req.metadata_import), options)
            .await
    }

    async fn update_metadata_import(
        &self,
        req: crate::model::UpdateMetadataImportRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req)
                            .and_then(|m| m.metadata_import.as_ref())
                            .map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("metadataImports"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req)
                            .and_then(|m| m.metadata_import.as_ref())
                            .map(|m| &m.name),
                        "metadata_import.name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("metadataImports"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*/metadataImports/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::PATCH, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = req
            .update_mask
            .as_ref()
            .map(|p| serde_json::to_value(p).map_err(Error::ser))
            .transpose()?
            .into_iter()
            .fold(builder, |builder, v| {
                use gaxi::query_parameter::QueryParameter;
                v.add(builder, "updateMask")
            });
        let builder = builder.query(&[("requestId", &req.request_id)]);

        self.inner
            .execute(builder, Some(req.metadata_import), options)
            .await
    }

    async fn export_metadata(
        &self,
        req: crate::model::ExportMetadataRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:exportMetadata",
                    composable_matches(
                        Some(&req).map(|m| &m.service)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.service),
                        "service",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn restore_service(
        &self,
        req: crate::model::RestoreServiceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:restore",
                    composable_matches(
                        Some(&req).map(|m| &m.service)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.service),
                        "service",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn list_backups(
        &self,
        req: crate::model::ListBackupsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListBackupsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}/backups",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("orderBy", &req.order_by)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_backup(
        &self,
        req: crate::model::GetBackupRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Backup>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("backups"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("backups"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*/backups/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_backup(
        &self,
        req: crate::model::CreateBackupRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}/backups",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("backupId", &req.backup_id)]);
        let builder = builder.query(&[("requestId", &req.request_id)]);

        self.inner.execute(builder, Some(req.backup), options).await
    }

    async fn delete_backup(
        &self,
        req: crate::model::DeleteBackupRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("backups"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("backups"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*/backups/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::DELETE, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("requestId", &req.request_id)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn query_metadata(
        &self,
        req: crate::model::QueryMetadataRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:queryMetadata",
                    composable_matches(
                        Some(&req).map(|m| &m.service)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.service),
                        "service",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn move_table_to_database(
        &self,
        req: crate::model::MoveTableToDatabaseRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:moveTableToDatabase",
                    composable_matches(
                        Some(&req).map(|m| &m.service)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.service),
                        "service",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn alter_metadata_resource_location(
        &self,
        req: crate::model::AlterMetadataResourceLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:alterLocation",
                    composable_matches(
                        Some(&req).map(|m| &m.service)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.service),
                        "service",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::ListLocationsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}/locations",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::Location>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:setIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .or_else(|| {
                Some(format!(
                    "/v1/{}:setIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("backups"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .or_else(|| {
                Some(format!(
                    "/v1/{}:setIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("backups"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*/backups/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/federations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:getIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .or_else(|| {
                Some(format!(
                    "/v1/{}:getIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("backups"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .or_else(|| {
                Some(format!(
                    "/v1/{}:getIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("backups"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*/backups/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/federations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = req
            .options
            .as_ref()
            .map(|p| serde_json::to_value(p).map_err(Error::ser))
            .transpose()?
            .into_iter()
            .fold(builder, |builder, v| {
                use gaxi::query_parameter::QueryParameter;
                v.add(builder, "options")
            });

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:testIamPermissions",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .or_else(|| {
                Some(format!(
                    "/v1/{}:testIamPermissions",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/federations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::ListOperationsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}/operations",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("operations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("operations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/operations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("operations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("operations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/operations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::DELETE, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
            .map(|r: gax::response::Response<wkt::Empty>| {
                let (parts, _) = r.into_parts();
                gax::response::Response::from_parts(parts, ())
            })
    }

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:cancel",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("operations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("operations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/operations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await.map(
            |r: gax::response::Response<wkt::Empty>| {
                let (parts, _) = r.into_parts();
                gax::response::Response::from_parts(parts, ())
            },
        )
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        self.inner.get_polling_error_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}

/// Implements [DataprocMetastoreFederation](super::stub::DataprocMetastoreFederation) using a [gaxi::http::ReqwestClient].
#[derive(Clone)]
pub struct DataprocMetastoreFederation {
    inner: gaxi::http::ReqwestClient,
}

impl std::fmt::Debug for DataprocMetastoreFederation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("DataprocMetastoreFederation")
            .field("inner", &self.inner)
            .finish()
    }
}

impl DataprocMetastoreFederation {
    pub async fn new(config: gaxi::options::ClientConfig) -> gax::client_builder::Result<Self> {
        let inner = gaxi::http::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::DataprocMetastoreFederation for DataprocMetastoreFederation {
    async fn list_federations(
        &self,
        req: crate::model::ListFederationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListFederationsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}/federations",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("orderBy", &req.order_by)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_federation(
        &self,
        req: crate::model::GetFederationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Federation>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/federations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_federation(
        &self,
        req: crate::model::CreateFederationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}/federations",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("federationId", &req.federation_id)]);
        let builder = builder.query(&[("requestId", &req.request_id)]);

        self.inner
            .execute(builder, Some(req.federation), options)
            .await
    }

    async fn update_federation(
        &self,
        req: crate::model::UpdateFederationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req)
                            .and_then(|m| m.federation.as_ref())
                            .map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req)
                            .and_then(|m| m.federation.as_ref())
                            .map(|m| &m.name),
                        "federation.name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/federations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::PATCH, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = req
            .update_mask
            .as_ref()
            .map(|p| serde_json::to_value(p).map_err(Error::ser))
            .transpose()?
            .into_iter()
            .fold(builder, |builder, v| {
                use gaxi::query_parameter::QueryParameter;
                v.add(builder, "updateMask")
            });
        let builder = builder.query(&[("requestId", &req.request_id)]);

        self.inner
            .execute(builder, Some(req.federation), options)
            .await
    }

    async fn delete_federation(
        &self,
        req: crate::model::DeleteFederationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/federations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::DELETE, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("requestId", &req.request_id)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::ListLocationsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}/locations",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::Location>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:setIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .or_else(|| {
                Some(format!(
                    "/v1/{}:setIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("backups"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .or_else(|| {
                Some(format!(
                    "/v1/{}:setIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("backups"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*/backups/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/federations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:getIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .or_else(|| {
                Some(format!(
                    "/v1/{}:getIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("backups"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .or_else(|| {
                Some(format!(
                    "/v1/{}:getIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("backups"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*/backups/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/federations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = req
            .options
            .as_ref()
            .map(|p| serde_json::to_value(p).map_err(Error::ser))
            .transpose()?
            .into_iter()
            .fold(builder, |builder, v| {
                use gaxi::query_parameter::QueryParameter;
                v.add(builder, "options")
            });

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:testIamPermissions",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .or_else(|| {
                Some(format!(
                    "/v1/{}:testIamPermissions",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("services"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/services/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("federations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/federations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn list_operations(
        &self,
        req: longrunning::model::ListOperationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::ListOperationsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}/operations",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_operation(
        &self,
        req: longrunning::model::GetOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<longrunning::model::Operation>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("operations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("operations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/operations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn delete_operation(
        &self,
        req: longrunning::model::DeleteOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("operations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("operations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/operations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::DELETE, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
            .map(|r: gax::response::Response<wkt::Empty>| {
                let (parts, _) = r.into_parts();
                gax::response::Response::from_parts(parts, ())
            })
    }

    async fn cancel_operation(
        &self,
        req: longrunning::model::CancelOperationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                Some(format!(
                    "/v1/{}:cancel",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("operations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                ))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("locations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("operations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/operations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await.map(
            |r: gax::response::Response<wkt::Empty>| {
                let (parts, _) = r.into_parts();
                gax::response::Response::from_parts(parts, ())
            },
        )
    }

    fn get_polling_error_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_error_policy::PollingErrorPolicy> {
        self.inner.get_polling_error_policy(options)
    }

    fn get_polling_backoff_policy(
        &self,
        options: &gax::options::RequestOptions,
    ) -> std::sync::Arc<dyn gax::polling_backoff_policy::PollingBackoffPolicy> {
        self.inner.get_polling_backoff_policy(options)
    }
}
