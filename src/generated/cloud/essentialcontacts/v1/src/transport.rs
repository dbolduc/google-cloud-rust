// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;

/// Implements [EssentialContactsService](super::stub::EssentialContactsService) using a [gaxi::http::ReqwestClient].
#[derive(Clone)]
pub struct EssentialContactsService {
    inner: gaxi::http::ReqwestClient,
}

impl std::fmt::Debug for EssentialContactsService {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("EssentialContactsService")
            .field("inner", &self.inner)
            .finish()
    }
}

impl EssentialContactsService {
    pub async fn new(config: gaxi::options::ClientConfig) -> gax::client_builder::Result<Self> {
        let inner = gaxi::http::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::EssentialContactsService for EssentialContactsService {
    async fn create_contact(
        &self,
        req: crate::model::CreateContactRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Contact>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("projects"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/contacts", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("folders"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/contacts", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/contacts", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("folders"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "folders/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, Some(req.contact), options)
            .await
    }

    async fn update_contact(
        &self,
        req: crate::model::UpdateContactRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Contact>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req)
                    .and_then(|m| m.contact.as_ref())
                    .map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("projects"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("contacts"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req)
                    .and_then(|m| m.contact.as_ref())
                    .map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("folders"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("contacts"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req)
                    .and_then(|m| m.contact.as_ref())
                    .map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("contacts"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).and_then(|m| m.contact.as_ref()).map(|m| &m.name),
                        "contact.name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("contacts"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/contacts/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).and_then(|m| m.contact.as_ref()).map(|m| &m.name),
                        "contact.name",
                        &[
                            Segment::Literal("folders"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("contacts"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "folders/*/contacts/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).and_then(|m| m.contact.as_ref()).map(|m| &m.name),
                        "contact.name",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("contacts"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/contacts/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::PATCH, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = req
            .update_mask
            .as_ref()
            .map(|p| serde_json::to_value(p).map_err(Error::ser))
            .transpose()?
            .into_iter()
            .fold(builder, |builder, v| {
                use gaxi::query_parameter::QueryParameter;
                v.add(builder, "updateMask")
            });

        self.inner
            .execute(builder, Some(req.contact), options)
            .await
    }

    async fn list_contacts(
        &self,
        req: crate::model::ListContactsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListContactsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("projects"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/contacts", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("folders"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/contacts", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/contacts", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("folders"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "folders/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_contact(
        &self,
        req: crate::model::GetContactRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Contact>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("projects"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("contacts"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("folders"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("contacts"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("contacts"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("contacts"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/contacts/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("folders"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("contacts"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "folders/*/contacts/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("contacts"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/contacts/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn delete_contact(
        &self,
        req: crate::model::DeleteContactRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("projects"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("contacts"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("folders"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("contacts"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("contacts"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("contacts"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/contacts/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("folders"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("contacts"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "folders/*/contacts/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/"),
                            Segment::Literal("contacts"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*/contacts/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::DELETE, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
            .map(|r: gax::response::Response<wkt::Empty>| {
                let (parts, _) = r.into_parts();
                gax::response::Response::from_parts(parts, ())
            })
    }

    async fn compute_contacts(
        &self,
        req: crate::model::ComputeContactsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ComputeContactsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("projects"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/contacts:compute", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("folders"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/contacts:compute", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/contacts:compute", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("folders"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "folders/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = req
            .notification_categories
            .iter()
            .fold(builder, |builder, p| {
                builder.query(&[("notificationCategories", p)])
            });
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn send_test_message(
        &self,
        req: crate::model::SendTestMessageRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.resource)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("projects"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/contacts:sendTestMessage", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.resource)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("folders"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/contacts:sendTestMessage", arg1,))
            })
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.resource)?;
                if !matches(
                    arg1,
                    &[
                        Segment::Literal("organizations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }
                Some(format!("/v1/{}/contacts:sendTestMessage", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("folders"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "folders/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("organizations"),
                            Segment::Literal("/"),
                            Segment::SingleWildcard,
                        ],
                        "organizations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await.map(
            |r: gax::response::Response<wkt::Empty>| {
                let (parts, _) = r.into_parts();
                gax::response::Response::from_parts(parts, ())
            },
        )
    }
}
