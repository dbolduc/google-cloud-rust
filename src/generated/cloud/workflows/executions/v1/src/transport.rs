// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;

/// Implements [Executions](super::stub::Executions) using a [gaxi::http::ReqwestClient].
#[derive(Clone)]
pub struct Executions {
    inner: gaxi::http::ReqwestClient,
}

impl std::fmt::Debug for Executions {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("Executions")
            .field("inner", &self.inner)
            .finish()
    }
}

impl Executions {
    pub async fn new(config: gaxi::options::ClientConfig) -> gax::client_builder::Result<Self> {
        let inner = gaxi::http::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::Executions for Executions {
    async fn list_executions(
        &self,
        req: crate::model::ListExecutionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListExecutionsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        // NEW:
        use gaxi::path_parameter::{BindingError, PathMismatch, SubstitutionMismatch, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;

                if !matches(
                    arg1,
                    &[
                        Segment::Literal("projects"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("workflows"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }

                Some(format!("/v1/{}/executions", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let mut subs = Vec::new();
                    {
                        // TODO : recheck in here.
                    }
                    paths.push(PathMismatch { subs });
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("pageSize", &req.page_size)]);
        let builder = builder.query(&[("pageToken", &req.page_token)]);
        let builder = builder.query(&[("view", &req.view)]);
        let builder = builder.query(&[("filter", &req.filter)]);
        let builder = builder.query(&[("orderBy", &req.order_by)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_execution(
        &self,
        req: crate::model::CreateExecutionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Execution>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        // NEW:
        use gaxi::path_parameter::{BindingError, PathMismatch, SubstitutionMismatch, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.parent)?;

                if !matches(
                    arg1,
                    &[
                        Segment::Literal("projects"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("workflows"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }

                Some(format!("/v1/{}/executions", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let mut subs = Vec::new();
                    {
                        // TODO : recheck in here.
                    }
                    paths.push(PathMismatch { subs });
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner
            .execute(builder, Some(req.execution), options)
            .await
    }

    async fn get_execution(
        &self,
        req: crate::model::GetExecutionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Execution>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        // NEW:
        use gaxi::path_parameter::{BindingError, PathMismatch, SubstitutionMismatch, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;

                if !matches(
                    arg1,
                    &[
                        Segment::Literal("projects"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("workflows"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("executions"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }

                Some(format!("/v1/{}", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let mut subs = Vec::new();
                    {
                        // TODO : recheck in here.
                    }
                    paths.push(PathMismatch { subs });
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::GET, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );
        let builder = builder.query(&[("view", &req.view)]);

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn cancel_execution(
        &self,
        req: crate::model::CancelExecutionRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Execution>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        // NEW:
        use gaxi::path_parameter::{BindingError, PathMismatch, SubstitutionMismatch, matches};
        use gaxi::routing_parameter::Segment;

        let path = None
            .or_else(|| {
                let arg1 = Some(&req).map(|m| &m.name)?;

                if !matches(
                    arg1,
                    &[
                        Segment::Literal("projects"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("locations"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("workflows"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                        Segment::Literal("/"),
                        Segment::Literal("executions"),
                        Segment::Literal("/"),
                        Segment::SingleWildcard,
                    ],
                ) {
                    return None;
                }

                Some(format!("/v1/{}:cancel", arg1,))
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let mut subs = Vec::new();
                    {
                        // TODO : recheck in here.
                    }
                    paths.push(PathMismatch { subs });
                }
                gax::error::Error::binding(BindingError { paths })
            })?;

        let builder = self
            .inner
            .builder(reqwest::Method::POST, path)
            .query(&[("$alt", "json;enum-encoding=int")])
            .header(
                "x-goog-api-client",
                reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
            );

        self.inner.execute(builder, Some(req), options).await
    }
}
