// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;

/// Implements [Dataform](super::stub::Dataform) using a [gaxi::http::ReqwestClient].
#[derive(Clone)]
pub struct Dataform {
    inner: gaxi::http::ReqwestClient,
}

impl std::fmt::Debug for Dataform {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("Dataform")
            .field("inner", &self.inner)
            .finish()
    }
}

impl Dataform {
    pub async fn new(config: gaxi::options::ClientConfig) -> gax::client_builder::Result<Self> {
        let inner = gaxi::http::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::Dataform for Dataform {
    async fn list_repositories(
        &self,
        req: crate::model::ListRepositoriesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListRepositoriesResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/repositories",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    let builder = builder.query(&[("orderBy", &req.order_by)]);
                    let builder = builder.query(&[("filter", &req.filter)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_repository(
        &self,
        req: crate::model::GetRepositoryRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Repository>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_repository(
        &self,
        req: crate::model::CreateRepositoryRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Repository>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/repositories",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    let builder = builder.query(&[("repositoryId", &req.repository_id)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.repository), options)
            .await
    }

    async fn update_repository(
        &self,
        req: crate::model::UpdateRepositoryRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Repository>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req)
                            .and_then(|m| m.repository.as_ref())
                            .map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::PATCH, path);
                    let builder = req
                        .update_mask
                        .as_ref()
                        .map(|p| serde_json::to_value(p).map_err(Error::ser))
                        .transpose()?
                        .into_iter()
                        .fold(builder, |builder, v| {
                            use gaxi::query_parameter::QueryParameter;
                            v.add(builder, "updateMask")
                        });
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req)
                            .and_then(|m| m.repository.as_ref())
                            .map(|m| &m.name),
                        "repository.name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.repository), options)
            .await
    }

    async fn delete_repository(
        &self,
        req: crate::model::DeleteRepositoryRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::DELETE, path);
                    let builder = builder.query(&[("force", &req.force)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
            .map(|r: gax::response::Response<wkt::Empty>| {
                let (parts, _) = r.into_parts();
                gax::response::Response::from_parts(parts, ())
            })
    }

    async fn commit_repository_changes(
        &self,
        req: crate::model::CommitRepositoryChangesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::CommitRepositoryChangesResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:commit",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn read_repository_file(
        &self,
        req: crate::model::ReadRepositoryFileRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ReadRepositoryFileResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:readFile",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("commitSha", &req.commit_sha)]);
                    let builder = builder.query(&[("path", &req.path)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn query_repository_directory_contents(
        &self,
        req: crate::model::QueryRepositoryDirectoryContentsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::QueryRepositoryDirectoryContentsResponse>>
    {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:queryDirectoryContents",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("commitSha", &req.commit_sha)]);
                    let builder = builder.query(&[("path", &req.path)]);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn fetch_repository_history(
        &self,
        req: crate::model::FetchRepositoryHistoryRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::FetchRepositoryHistoryResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:fetchHistory",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn compute_repository_access_token_status(
        &self,
        req: crate::model::ComputeRepositoryAccessTokenStatusRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ComputeRepositoryAccessTokenStatusResponse>>
    {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:computeAccessTokenStatus",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn fetch_remote_branches(
        &self,
        req: crate::model::FetchRemoteBranchesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::FetchRemoteBranchesResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:fetchRemoteBranches",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn list_workspaces(
        &self,
        req: crate::model::ListWorkspacesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListWorkspacesResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/workspaces",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    let builder = builder.query(&[("orderBy", &req.order_by)]);
                    let builder = builder.query(&[("filter", &req.filter)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_workspace(
        &self,
        req: crate::model::GetWorkspaceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Workspace>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_workspace(
        &self,
        req: crate::model::CreateWorkspaceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Workspace>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/workspaces",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    let builder = builder.query(&[("workspaceId", &req.workspace_id)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.workspace), options)
            .await
    }

    async fn delete_workspace(
        &self,
        req: crate::model::DeleteWorkspaceRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::DELETE, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
            .map(|r: gax::response::Response<wkt::Empty>| {
                let (parts, _) = r.into_parts();
                gax::response::Response::from_parts(parts, ())
            })
    }

    async fn install_npm_packages(
        &self,
        req: crate::model::InstallNpmPackagesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::InstallNpmPackagesResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:installNpmPackages",
                    composable_matches(
                        Some(&req).map(|m| &m.workspace)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.workspace),
                        "workspace",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn pull_git_commits(
        &self,
        req: crate::model::PullGitCommitsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::PullGitCommitsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:pull",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn push_git_commits(
        &self,
        req: crate::model::PushGitCommitsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::PushGitCommitsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:push",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn fetch_file_git_statuses(
        &self,
        req: crate::model::FetchFileGitStatusesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::FetchFileGitStatusesResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:fetchFileGitStatuses",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn fetch_git_ahead_behind(
        &self,
        req: crate::model::FetchGitAheadBehindRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::FetchGitAheadBehindResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:fetchGitAheadBehind",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("remoteBranch", &req.remote_branch)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn commit_workspace_changes(
        &self,
        req: crate::model::CommitWorkspaceChangesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::CommitWorkspaceChangesResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:commit",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn reset_workspace_changes(
        &self,
        req: crate::model::ResetWorkspaceChangesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ResetWorkspaceChangesResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:reset",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn fetch_file_diff(
        &self,
        req: crate::model::FetchFileDiffRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::FetchFileDiffResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:fetchFileDiff",
                    composable_matches(
                        Some(&req).map(|m| &m.workspace)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("path", &req.path)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.workspace),
                        "workspace",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn query_directory_contents(
        &self,
        req: crate::model::QueryDirectoryContentsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::QueryDirectoryContentsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:queryDirectoryContents",
                    composable_matches(
                        Some(&req).map(|m| &m.workspace)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("path", &req.path)]);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.workspace),
                        "workspace",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn search_files(
        &self,
        req: crate::model::SearchFilesRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::SearchFilesResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:searchFiles",
                    composable_matches(
                        Some(&req).map(|m| &m.workspace)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    let builder = builder.query(&[("filter", &req.filter)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.workspace),
                        "workspace",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn make_directory(
        &self,
        req: crate::model::MakeDirectoryRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::MakeDirectoryResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:makeDirectory",
                    composable_matches(
                        Some(&req).map(|m| &m.workspace)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.workspace),
                        "workspace",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn remove_directory(
        &self,
        req: crate::model::RemoveDirectoryRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::RemoveDirectoryResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:removeDirectory",
                    composable_matches(
                        Some(&req).map(|m| &m.workspace)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.workspace),
                        "workspace",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn move_directory(
        &self,
        req: crate::model::MoveDirectoryRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::MoveDirectoryResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:moveDirectory",
                    composable_matches(
                        Some(&req).map(|m| &m.workspace)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.workspace),
                        "workspace",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn read_file(
        &self,
        req: crate::model::ReadFileRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ReadFileResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:readFile",
                    composable_matches(
                        Some(&req).map(|m| &m.workspace)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("path", &req.path)]);
                    let builder = builder.query(&[("revision", &req.revision)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.workspace),
                        "workspace",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn remove_file(
        &self,
        req: crate::model::RemoveFileRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::RemoveFileResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:removeFile",
                    composable_matches(
                        Some(&req).map(|m| &m.workspace)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.workspace),
                        "workspace",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn move_file(
        &self,
        req: crate::model::MoveFileRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::MoveFileResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:moveFile",
                    composable_matches(
                        Some(&req).map(|m| &m.workspace)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.workspace),
                        "workspace",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn write_file(
        &self,
        req: crate::model::WriteFileRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::WriteFileResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:writeFile",
                    composable_matches(
                        Some(&req).map(|m| &m.workspace)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.workspace),
                        "workspace",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn list_release_configs(
        &self,
        req: crate::model::ListReleaseConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListReleaseConfigsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/releaseConfigs",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_release_config(
        &self,
        req: crate::model::GetReleaseConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ReleaseConfig>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/releaseConfigs/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/releaseConfigs/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/releaseConfigs/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_release_config(
        &self,
        req: crate::model::CreateReleaseConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ReleaseConfig>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/releaseConfigs",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    let builder = builder.query(&[("releaseConfigId", &req.release_config_id)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.release_config), options)
            .await
    }

    async fn update_release_config(
        &self,
        req: crate::model::UpdateReleaseConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ReleaseConfig>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req)
                            .and_then(|m| m.release_config.as_ref())
                            .map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/releaseConfigs/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::PATCH, path);
                    let builder = req
                        .update_mask
                        .as_ref()
                        .map(|p| serde_json::to_value(p).map_err(Error::ser))
                        .transpose()?
                        .into_iter()
                        .fold(builder, |builder, v| {
                            use gaxi::query_parameter::QueryParameter;
                            v.add(builder, "updateMask")
                        });
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req)
                            .and_then(|m| m.release_config.as_ref())
                            .map(|m| &m.name),
                        "release_config.name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/releaseConfigs/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/releaseConfigs/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.release_config), options)
            .await
    }

    async fn delete_release_config(
        &self,
        req: crate::model::DeleteReleaseConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/releaseConfigs/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::DELETE, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/releaseConfigs/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/releaseConfigs/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
            .map(|r: gax::response::Response<wkt::Empty>| {
                let (parts, _) = r.into_parts();
                gax::response::Response::from_parts(parts, ())
            })
    }

    async fn list_compilation_results(
        &self,
        req: crate::model::ListCompilationResultsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListCompilationResultsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/compilationResults",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    let builder = builder.query(&[("orderBy", &req.order_by)]);
                    let builder = builder.query(&[("filter", &req.filter)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_compilation_result(
        &self,
        req: crate::model::GetCompilationResultRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::CompilationResult>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/compilationResults/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/compilationResults/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/compilationResults/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_compilation_result(
        &self,
        req: crate::model::CreateCompilationResultRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::CompilationResult>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/compilationResults",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.compilation_result), options)
            .await
    }

    async fn query_compilation_result_actions(
        &self,
        req: crate::model::QueryCompilationResultActionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::QueryCompilationResultActionsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:query",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/compilationResults/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    let builder = builder.query(&[("filter", &req.filter)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/compilationResults/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/compilationResults/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn list_workflow_configs(
        &self,
        req: crate::model::ListWorkflowConfigsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListWorkflowConfigsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/workflowConfigs",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_workflow_config(
        &self,
        req: crate::model::GetWorkflowConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::WorkflowConfig>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowConfigs/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowConfigs/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workflowConfigs/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_workflow_config(
        &self,
        req: crate::model::CreateWorkflowConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::WorkflowConfig>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/workflowConfigs",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    let builder = builder.query(&[("workflowConfigId", &req.workflow_config_id)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.workflow_config), options)
            .await
    }

    async fn update_workflow_config(
        &self,
        req: crate::model::UpdateWorkflowConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::WorkflowConfig>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req)
                            .and_then(|m| m.workflow_config.as_ref())
                            .map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowConfigs/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::PATCH, path);
                    let builder = req
                        .update_mask
                        .as_ref()
                        .map(|p| serde_json::to_value(p).map_err(Error::ser))
                        .transpose()?
                        .into_iter()
                        .fold(builder, |builder, v| {
                            use gaxi::query_parameter::QueryParameter;
                            v.add(builder, "updateMask")
                        });
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req)
                            .and_then(|m| m.workflow_config.as_ref())
                            .map(|m| &m.name),
                        "workflow_config.name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowConfigs/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workflowConfigs/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.workflow_config), options)
            .await
    }

    async fn delete_workflow_config(
        &self,
        req: crate::model::DeleteWorkflowConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowConfigs/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::DELETE, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowConfigs/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workflowConfigs/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
            .map(|r: gax::response::Response<wkt::Empty>| {
                let (parts, _) = r.into_parts();
                gax::response::Response::from_parts(parts, ())
            })
    }

    async fn list_workflow_invocations(
        &self,
        req: crate::model::ListWorkflowInvocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::ListWorkflowInvocationsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/workflowInvocations",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    let builder = builder.query(&[("orderBy", &req.order_by)]);
                    let builder = builder.query(&[("filter", &req.filter)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_workflow_invocation(
        &self,
        req: crate::model::GetWorkflowInvocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::WorkflowInvocation>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowInvocations/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowInvocations/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workflowInvocations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn create_workflow_invocation(
        &self,
        req: crate::model::CreateWorkflowInvocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::WorkflowInvocation>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/workflowInvocations",
                    composable_matches(
                        Some(&req).map(|m| &m.parent)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.parent),
                        "parent",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, Some(req.workflow_invocation), options)
            .await
    }

    async fn delete_workflow_invocation(
        &self,
        req: crate::model::DeleteWorkflowInvocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<()>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowInvocations/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::DELETE, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowInvocations/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workflowInvocations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
            .map(|r: gax::response::Response<wkt::Empty>| {
                let (parts, _) = r.into_parts();
                gax::response::Response::from_parts(parts, ())
            })
    }

    async fn cancel_workflow_invocation(
        &self,
        req: crate::model::CancelWorkflowInvocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::CancelWorkflowInvocationResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:cancel",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowInvocations/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowInvocations/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workflowInvocations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn query_workflow_invocation_actions(
        &self,
        req: crate::model::QueryWorkflowInvocationActionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::QueryWorkflowInvocationActionsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:query",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowInvocations/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workflowInvocations/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workflowInvocations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_config(
        &self,
        req: crate::model::GetConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Config>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/config"),
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/config"),
                        ],
                        "projects/*/locations/*/config",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn update_config(
        &self,
        req: crate::model::UpdateConfigRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::model::Config>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req)
                            .and_then(|m| m.config.as_ref())
                            .map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/config"),
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::PATCH, path);
                    let builder = req
                        .update_mask
                        .as_ref()
                        .map(|p| serde_json::to_value(p).map_err(Error::ser))
                        .transpose()?
                        .into_iter()
                        .fold(builder, |builder, v| {
                            use gaxi::query_parameter::QueryParameter;
                            v.add(builder, "updateMask")
                        });
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).and_then(|m| m.config.as_ref()).map(|m| &m.name),
                        "config.name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/config"),
                        ],
                        "projects/*/locations/*/config",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req.config), options).await
    }

    async fn list_locations(
        &self,
        req: location::model::ListLocationsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::ListLocationsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}/locations",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[Segment::Literal("projects/"), Segment::SingleWildcard,]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = builder.query(&[("filter", &req.filter)]);
                    let builder = builder.query(&[("pageSize", &req.page_size)]);
                    let builder = builder.query(&[("pageToken", &req.page_token)]);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[Segment::Literal("projects/"), Segment::SingleWildcard],
                        "projects/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn get_location(
        &self,
        req: location::model::GetLocationRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<location::model::Location>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}",
                    composable_matches(
                        Some(&req).map(|m| &m.name)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.name),
                        "name",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn set_iam_policy(
        &self,
        req: iam_v1::model::SetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:setIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .or_else(|| {
                let path = format!(
                    "/v1/{}:setIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }

    async fn get_iam_policy(
        &self,
        req: iam_v1::model::GetIamPolicyRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::Policy>> {
        let options = gax::options::internal::set_default_idempotency(options, true);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:getIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = req
                        .options
                        .as_ref()
                        .map(|p| serde_json::to_value(p).map_err(Error::ser))
                        .transpose()?
                        .into_iter()
                        .fold(builder, |builder, v| {
                            use gaxi::query_parameter::QueryParameter;
                            v.add(builder, "options")
                        });
                    Ok(builder)
                })();
                Some(builder)
            })
            .or_else(|| {
                let path = format!(
                    "/v1/{}:getIamPolicy",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::GET, path);
                    let builder = req
                        .options
                        .as_ref()
                        .map(|p| serde_json::to_value(p).map_err(Error::ser))
                        .transpose()?
                        .into_iter()
                        .fold(builder, |builder, v| {
                            use gaxi::query_parameter::QueryParameter;
                            v.add(builder, "options")
                        });
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner
            .execute(builder, None::<gaxi::http::NoBody>, options)
            .await
    }

    async fn test_iam_permissions(
        &self,
        req: iam_v1::model::TestIamPermissionsRequest,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<iam_v1::model::TestIamPermissionsResponse>> {
        let options = gax::options::internal::set_default_idempotency(options, false);
        use gaxi::path_parameter::{BindingError, PathMismatchBuilder, composable_matches};
        use gaxi::routing_parameter::Segment;

        let builder = None
            .or_else(|| {
                let path = format!(
                    "/v1/{}:testIamPermissions",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .or_else(|| {
                let path = format!(
                    "/v1/{}:testIamPermissions",
                    composable_matches(
                        Some(&req).map(|m| &m.resource)?,
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ]
                    )?,
                );

                let builder = (|| {
                    let builder = self.inner.builder(reqwest::Method::POST, path);
                    Ok(builder)
                })();
                Some(builder)
            })
            .ok_or_else(|| {
                let mut paths = Vec::new();
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*",
                    );
                    paths.push(builder.build());
                }
                {
                    let builder = PathMismatchBuilder::default();
                    let builder = builder.maybe_add_match_error(
                        Some(&req).map(|m| &m.resource),
                        "resource",
                        &[
                            Segment::Literal("projects/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/locations/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/repositories/"),
                            Segment::SingleWildcard,
                            Segment::Literal("/workspaces/"),
                            Segment::SingleWildcard,
                        ],
                        "projects/*/locations/*/repositories/*/workspaces/*",
                    );
                    paths.push(builder.build());
                }
                gax::error::Error::binding(BindingError { paths })
            })??;
        let builder = builder.query(&[("$alt", "json;enum-encoding=int")]).header(
            "x-goog-api-client",
            reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER),
        );

        self.inner.execute(builder, Some(req), options).await
    }
}
