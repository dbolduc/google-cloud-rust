// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Contains integration tests for the generated `Convert` implementations.
//!
//! For generated code, we write hand-crafted integration tests *once* in the
//! project. The generated implementations for `gaxi::prost::Convert` usually
//! reference a type generated by Protobuf, and these are `pub(crate)`.
//! Therefore, the tests must be part of the crate that contains them, and
//! cannot be a separate integration tests crate, or a file in the `tests/`
//! directory.
//!
//! This fixture tests conversions of `google::longrunning::Operation`s.
//!
//! Other tests are found in `src/firestore/src/convert.rs`.

#[cfg(test)]
mod test {
    use gaxi::prost::ConvertError;
    use crate::lro_any_to_prost;

    #[test]
    //fn test_basic_fields() -> anyhow::Result<()> {
    fn test_basic_fields() {
        todo!("test to/from proto");
        // test:
        // - with expected metadata
        // - with unexpected metadata
        // - without metadata (Option = None)
        // - with default metadata (default Any)
        // - with an error (rpc::Status)
        // - with an expected result
        // - with an unexpected result
        //
        // ^ can we roundtrip? Or do we need to go one way.
        // Probably one way for the errors.
        //
        // would do one with an expected Empty, but I don't think it exists.
    }

    #[test]
    fn lro_any_to_prost_known() -> anyhow::Result<()> {
        let expected = {
            let folder = crate::google::storage::control::v2::Folder {
                name: "test-name".to_string(),
                metageneration: 42,
                ..Default::default()
            };
            prost_types::Any::from_msg(&folder)?
        };
        let wkt = {
            let folder = crate::model::Folder::new().set_name("test-name").set_metageneration(42);
            wkt::Any::try_from(&folder)?
        };
        let prost = lro_any_to_prost(wkt)?;
        assert_eq!(prost, expected);

        let expected = {
            let md = crate::google::storage::control::v2::CreateAnywhereCacheMetadata {
                zone: Some("test-zone".to_string()),
                ..Default::default()
            };
            prost_types::Any::from_msg(&md)?
        };
        let wkt = {
            let md = crate::model::CreateAnywhereCacheMetadata::new().set_zone("test-zone".to_string());
            wkt::Any::try_from(&md)?
        };
        let prost = lro_any_to_prost(wkt)?;
        assert_eq!(prost, expected);

        Ok(())
    }

    #[test]
    fn lro_any_to_prost_empty() -> anyhow::Result<()> {
        let wkt = wkt::Any::default();
        let prost = lro_any_to_prost(wkt)?;
        assert_eq!(prost, prost_types::Any::default());
        Ok(())
    }

    #[test]
    fn lro_any_to_prost_unknown() -> anyhow::Result<()>  {
        #[derive(Clone, Debug, Default, PartialEq, serde::Deserialize, serde::Serialize)]
        struct TestMessage {}
        impl wkt::message::Message for TestMessage {
            fn typename() -> &'static str {
                "type.googleapis.com/my.custom.TestMessage"
            }
        }

        let wkt = wkt::Any::try_from(&TestMessage {})?;
        let prost = lro_any_to_prost(wkt);
        assert!(matches!(prost, Err(ConvertError::UnexpectedTypeUrl(_))));

        Ok(())
    }
}
