// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// Code generated by sidekick. DO NOT EDIT.

use crate::Result;
#[allow(unused_imports)]
use gax::error::Error;

/// Implements [TestService](super::stub::TestService) using a [gaxi::http::ReqwestClient].
#[derive(Clone)]
pub struct TestService {
    inner: gaxi::http::ReqwestClient,
}

impl std::fmt::Debug for TestService {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error> {
        f.debug_struct("TestService")
            .field("inner", &self.inner)
            .finish()
    }
}

impl TestService {
    pub async fn new(config: gaxi::options::ClientConfig) -> gax::client_builder::Result<Self> {
        let inner = gaxi::http::ReqwestClient::new(config, crate::DEFAULT_HOST).await?;
        Ok(Self { inner })
    }
}

impl super::stub::TestService for TestService {
    async fn do_foo(
        &self,
        req: crate::generated::Request,
        options: gax::options::RequestOptions,
    ) -> Result<gax::response::Response<crate::generated::Response>> {
        let options = gax::options::internal::set_default_idempotency(
            options,
            false,
        );
        use gax::error::binding::BindingError;
        use gaxi::routing_parameter::Segment;
        use gaxi::path_parameter::{PathMismatchBuilder, try_match};

        let builder = None
        .or_else(|| {
            let path = format!(
                "/v1/{}:first",
                try_match(Some(&req).map(|m| &m.name).map(|s| s.as_str()), &[Segment::Literal("projects/"), Segment::SingleWildcard, Segment::Literal("/locations/"), Segment::SingleWildcard])?,
            );

            let builder = (|| {
                let builder = self
                    .inner
                    .builder(reqwest::Method::POST, path);
                let builder = builder.query(&[("project", &req.project)]);
                let builder = builder.query(&[("location", &req.location)]);
                let builder = builder.query(&[("id", &req.id)]);
                let builder = req.optional.iter().fold(builder, |builder, p| builder.query(&[("optional", p)]));
                let builder = req.child.as_ref().map(|p| serde_json::to_value(p).map_err(Error::ser) ).transpose()?.into_iter().fold(builder, |builder, v| { use gaxi::query_parameter::QueryParameter; v.add(builder, "child") });
                Ok(builder)
            })();
            Some(builder)
        })
        .or_else(|| {
            let path = format!(
                "/v1/projects/{}/locations/{}/ids/{}:additionalBinding",
                try_match(Some(&req).map(|m| &m.project).map(|s| s.as_str()), &[Segment::SingleWildcard])?,
                try_match(Some(&req).map(|m| &m.location).map(|s| s.as_str()), &[Segment::SingleWildcard])?,
                try_match(Some(&req).map(|m| &m.id), &[Segment::SingleWildcard])?,
            );

            let builder = (|| {
                let builder = self
                    .inner
                    .builder(reqwest::Method::POST, path);
                let builder = builder.query(&[("name", &req.name)]);
                let builder = req.optional.iter().fold(builder, |builder, p| builder.query(&[("optional", p)]));
                let builder = req.child.as_ref().map(|p| serde_json::to_value(p).map_err(Error::ser) ).transpose()?.into_iter().fold(builder, |builder, v| { use gaxi::query_parameter::QueryParameter; v.add(builder, "child") });
                Ok(builder)
            })();
            Some(builder)
        })
        .or_else(|| {
            let path = format!(
                "/v1/projects/{}/locations/{}/ids/{}:additionalBindingOnChild",
                try_match(Some(&req).and_then(|m| m.child.as_ref()).map(|m| &m.project).map(|s| s.as_str()), &[Segment::SingleWildcard])?,
                try_match(Some(&req).and_then(|m| m.child.as_ref()).map(|m| &m.location).map(|s| s.as_str()), &[Segment::SingleWildcard])?,
                try_match(Some(&req).and_then(|m| m.child.as_ref()).map(|m| &m.id), &[Segment::SingleWildcard])?,
            );

            let builder = (|| {
                let builder = self
                    .inner
                    .builder(reqwest::Method::GET, path);
                let builder = builder.query(&[("name", &req.name)]);
                let builder = builder.query(&[("project", &req.project)]);
                let builder = builder.query(&[("location", &req.location)]);
                let builder = builder.query(&[("id", &req.id)]);
                let builder = req.optional.iter().fold(builder, |builder, p| builder.query(&[("optional", p)]));
                let builder = req.child.as_ref().map(|p| serde_json::to_value(p).map_err(Error::ser) ).transpose()?.into_iter().fold(builder, |builder, v| { use gaxi::query_parameter::QueryParameter; v.add(builder, "child") });
                Ok(builder)
            })();
            Some(builder)
        })
        .ok_or_else(|| {
            let mut paths = Vec::new();
            {
                let builder = PathMismatchBuilder::default();
                let builder = builder.maybe_add(
                    Some(&req).map(|m| &m.name).map(|s| s.as_str()),
                    &[Segment::Literal("projects/"), Segment::SingleWildcard, Segment::Literal("/locations/"), Segment::SingleWildcard],
                    "name",
                    "projects/*/locations/*");
                paths.push(builder.build());
            }
            {
                let builder = PathMismatchBuilder::default();
                let builder = builder.maybe_add(
                    Some(&req).map(|m| &m.project).map(|s| s.as_str()),
                    &[Segment::SingleWildcard],
                    "project",
                    "*");
                let builder = builder.maybe_add(
                    Some(&req).map(|m| &m.location).map(|s| s.as_str()),
                    &[Segment::SingleWildcard],
                    "location",
                    "*");
                let builder = builder.maybe_add(
                    Some(&req).map(|m| &m.id),
                    &[Segment::SingleWildcard],
                    "id",
                    "*");
                paths.push(builder.build());
            }
            {
                let builder = PathMismatchBuilder::default();
                let builder = builder.maybe_add(
                    Some(&req).and_then(|m| m.child.as_ref()).map(|m| &m.project).map(|s| s.as_str()),
                    &[Segment::SingleWildcard],
                    "child.project",
                    "*");
                let builder = builder.maybe_add(
                    Some(&req).and_then(|m| m.child.as_ref()).map(|m| &m.location).map(|s| s.as_str()),
                    &[Segment::SingleWildcard],
                    "child.location",
                    "*");
                let builder = builder.maybe_add(
                    Some(&req).and_then(|m| m.child.as_ref()).map(|m| &m.id),
                    &[Segment::SingleWildcard],
                    "child.id",
                    "*");
                paths.push(builder.build());
            }
            gax::error::Error::binding(BindingError { paths })
        })??;
        let builder = builder
                .query(&[("$alt", "json;enum-encoding=int")])
                .header("x-goog-api-client", reqwest::header::HeaderValue::from_static(&crate::info::X_GOOG_API_CLIENT_HEADER));
        self.inner.execute(
            builder,
            Some(gaxi::http::NoBody),
            options,
        ).await
    }

}

